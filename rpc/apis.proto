syntax = "proto3";
package rpc;

import "github.com/iost-official/Go-IOS-Protocol/core/tx/tx.proto";
import "github.com/iost-official/Go-IOS-Protocol/core/block/block.proto";
import "github.com/iost-official/Go-IOS-Protocol/core/event/event.proto";
import "google/api/annotations.proto";
import "google/protobuf/Empty.proto";

// rpc apis
service Apis {
	// get the current height of the blockchain
	rpc GetHeight (google.protobuf.Empty) returns (HeightRes) {
        option (google.api.http) = {
            get: "/getHeight"
        };
    }
    // get the tx by hash
    rpc GetTxByHash (HashReq) returns (txRes) {
        option (google.api.http) = {
            get: "/getTxByHash/{hash}"
        };
    }
    // get receipt by hash
    rpc GetTxReceiptByHash(HashReq) returns (txReceiptRes) {
        option (google.api.http) = {
            get: "/getTxReceiptByHash/{hash}"
        };
    }
    // get receipt by txhash
    rpc GetTxReceiptByTxHash(HashReq) returns (txReceiptRes) {
        option (google.api.http) = {
            get: "/getTxReceiptByTxHash/{hash}"
        };
    }
    // get the block by hash
	rpc GetBlockByHash (BlockByHashReq) returns (BlockInfo) {
        option (google.api.http) = {
            get: "/getBlockByHash/{hash}/{complete}"
        };
    }
    // get the block by number
	rpc getBlockByNum (BlockByNumReq) returns (BlockInfo) {
        option (google.api.http) = {
            get: "/getBlockByNum/{num}/{complete}"
        };
    }
    // get the balance of some account by account ID
    rpc GetBalance (GetBalanceReq) returns (GetBalanceRes) {
        option (google.api.http) = {
            get: "/getBalance/{ID}/{useLongestChain}"
        };
    }
    // get the Net ID
    rpc GetNetID (google.protobuf.Empty) returns (GetNetIDRes) {
        option (google.api.http) = {
            get: "/getNetID"
        };
    }
    // get the value of the corresponding key in stateDB
    rpc GetState (GetStateReq) returns (GetStateRes) {
        option (google.api.http) = {
            get: "/getState/{key}"
        };
    }
    // receive encoded tx
    rpc SendRawTx (RawTxReq) returns (SendRawTxRes) {
        option (google.api.http) = {
            post: "/sendRawTx"
            body: "*"
        };
    }
    // not supported yet
    rpc EstimateGas (RawTxReq) returns (GasRes) {
        option (google.api.http) = {
            post: "/estimateGas"
            body: "*"
        };
    }
    // subscribe an event
    rpc Subscribe (SubscribeReq) returns (stream SubscribeRes) {
        option (google.api.http) = {
            post: "/subscribe"
            body: "*"
        };
    }
}

message HashReq {
	string hash=1;
}

// complete means return the whole block or just blockhead+txhash_list
message BlockByHashReq {
	string hash=1;
	bool complete=2;
}

message BlockByNumReq {
	int64 num=1;
	bool complete=2;	
}

message GetBalanceReq {
	string ID=1;
    bool useLongestChain = 2;
}

message GetStateReq {
	string key=1;
    string field = 2;
}

//the rawdata of a tx
message RawTxReq {
	bytes data=1;
}

message SubscribeReq {
    repeated event.Event.Topic topics=1;
}

message HeightRes {
	int64 height=1;
}

message GetBalanceRes {
	int64 balance=1;
}

message GetNetIDRes {
	string ID=1;
}

message GetStateRes {
	string value=1;
}

message SendRawTxRes {
	string hash=1;
}

message GasRes {
	uint64 gas=1;
}

message txRes {
    tx.TxRaw txRaw = 1;
    bytes hash = 2;
}

message txReceiptRes {
    tx.TxReceiptRaw txReceiptRaw = 1;
    bytes hash = 2;
}

message BlockInfo {
    block.BlockHead head = 1;
    bytes hash = 2;
    repeated tx.TxRaw txs = 3;
	repeated bytes txhash= 4 ;
    repeated tx.TxReceiptRaw receipts = 5;
    repeated bytes receiptHash = 6;
}

message SubscribeRes {
    event.Event ev=1;
}
